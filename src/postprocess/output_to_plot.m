function output_to_plot(s,plot_flag)
% Function for combining output data files generated by Look@NanoSIMS
% into a matrix according to the meta-instructions defined in a specified
% meta-file. These data will be plotted with a specific legend scheme and
% also exported into a data file.
% (c) Lubos Polerecky, 14.10.2009, MPI Bremen
% 08-07-2010: this function is now called by the process_metafile GUI,
% where all the settings are specified by the used and passed here.
% 26-03-2011: implemented for up to 6 variables

if nargin==1
    plot_flag=1;
end;

if(exist(s.base_dir)~=7 | exist(s.metafile)~=2)
    disp(['Dataset directory or metafile does not exist. Nothing done.']);
else

    %% form the final output file basename
    [pathstr, name, ext] = fileparts(s.metafile);
    foutname = [pathstr,delimiter,name];
    if(~isdir(foutname))
        mkdir(foutname);
    end;
    foutname = [foutname delimiter name];

    %% get instructions from the meta file
    all_cell_types = regexprep(s.cellclasses,' ','');
    [id,fname,tmnt,ct,xyz,nf,all,plot3d,basedir]=getmetainstructions(s.metafile, all_cell_types, s.plot3d);
    % convert tmnt from a cell (array of strings) to a matrix
    tmnt = cell2mat(tmnt);
    
    if ~isempty(basedir)
        if isdir(basedir)
            s.base_dir = basedir;
        end;
    end;
    
    plot2d = s.plot2d;

    dext = '.dac';
  
    %% read data from all specified input files 
    % assign them to variables dxN and dyN, where N=1,2,3;
    for j=1:nf
        for k=1:6 % we assume that k is always at least 1, otherwise exporting data doesn't make sense
            
            if(length(xyz{j})>=k)
                fncells = [s.base_dir, fname{j}, delimiter, s.classificationfile]; 
                fn = [s.base_dir, fname{j}, delimiter, 'dat', delimiter, xyz{j}{k}, dext];	        
                [a,b,c,d,e,f,g] = load_xyz_data(fn, fncells, xyz{j}{k}, ct{j});        
            else
                a=cell(size(ct{j}));
            end;
            switch k
                case 1, dx1{j} = a;
                case 2, dy1{j} = a;
                case 3, dx2{j} = a;
                case 4, dy2{j} = a;
                case 5, dx3{j} = a;
                case 6, dy3{j} = a;
            end;
            if (k==1)
                cellid{j}=b; area{j}=c; pixels{j}=d; xpos{j}=e; ypos{j}=f; l2w{j}=g;
            end;
            
        end;        
    end;
    
    %% export all gathered data to an output text file
    
    % generate format with which the data will be exported 
    fmt=sprintf('#id\tfile\ttreatment\tcell_type\tcell_id');
    fmt1='%d\t%s\t%d\t%c\t%d';
    fmt2=[];
    for j=1:length(xyz{1})
        fmt=[fmt sprintf('\t%s\tstd',xyz{1}{j})];
        fmt2=[fmt2 '\t%.4e\t%.4e'];
    end;

    % generate the filename for the output
    fn = [foutname,dext];  

    fprintf(1,'Exporting data to %s ... ',fn); 
    fid=fopen(fn,'w');

    % open output filename and export the data
    fprintf(fid,'%s\n',fmt);
    for j=1:nf
        for kk=1:min([length(dx1{j}) length(ct{j})])
            out=[dx1{j}{kk} dy1{j}{kk} dx2{j}{kk} dy2{j}{kk} dx3{j}{kk} dy3{j}{kk}];
            for ii=1:size(out,1) %length(cellid{j}{kk})                    
                fprintf(fid,fmt1,id{j},fname{j},tmnt(j),ct{j}(kk),cellid{j}{kk}(ii));
                fprintf(fid,fmt2,out(ii,:));
                fprintf(fid,'\n');
            end;
        end;
    end;
    fclose(fid);
    fprintf(1,'Done.\n');       

    %fnh = [foutname,'-hxy',dext];
    %fna = [foutname,'-avg',dext];      

    all_treatments=str2num(s.treatments);
    
    f2=[]; f3=[]; f4=[]; f5=[]; f6=[];
    
    % plot data as 2d graphs
    if plot2d               
        
        epsdir = [pathstr delimiter name delimiter 'eps'];
        if ~isdir(epsdir)
            mkdir(epsdir);
            fprintf(1,'Directory %s did not exist, so it was created.\n',epsdir);
        end;
                
        % reformat the color/symbol scheme
        p1=regexprep(s.cellcolors,' ','');
        p2=regexprep(s.symbols,' ',''); 
        
        fprintf(1,'Plotting 2D graph ... \n');                       
        
        % plot x1 vs y1
        if(length(all{1})>1)
            fig = 1;
            ind1 = 1;
            ind2 = 2;
            xscale = s.xscale1;
            yscale = s.yscale1;
            logscalex = s.logscale.x1;
            logscaley = s.logscale.y1;
            xd=dx1;
            yd=dy1;
            [f2 pdffile2]=plot_data_2d(plot_flag, fig, ind1, ind2, nf, fname, all, xd, yd, ct,p1,p2,all_treatments,tmnt,...
                s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name);        
        end;
               
        % plot x2 vs y2
        if(length(all{1})>3)
            fig = 2;
            ind1 = 3;
            ind2 = 4;
            xscale = s.xscale2;
            yscale = s.yscale2;
            logscalex = s.logscale.x2;
            logscaley = s.logscale.y2;
            xd=dx2;
            yd=dy2;
            [f3 pdffile3]=plot_data_2d(plot_flag, fig, ind1, ind2, nf, fname, all, xd, yd, ct,p1,p2,all_treatments,tmnt,...
                s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name);        
        end;
        
        % plot x3 vs y3
        if(length(all{1})>5)
            fig = 3;
            ind1 = 5;
            ind2 = 6;
            xscale = s.xscale3;
            yscale = s.yscale3;
            logscalex = s.logscale.x3;
            logscaley = s.logscale.y3;
            xd=dx3;
            yd=dy3;
            [f4 pdffile4]=plot_data_2d(plot_flag, fig, ind1, ind2, nf, fname, all, xd, yd, ct,p1,p2,all_treatments,tmnt,...
                s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name);
        end;        
       
        if plot_flag == 1
            j=0;
            pdffile=[];
            if ~isempty(f2)
                j=j+1;
                pdffile{j}=pdffile2;
            end;
            if ~isempty(f3)
                j=j+1;
                pdffile{j}=pdffile3;
            end;
            if ~isempty(f4)
                j=j+1;
                pdffile{j}=pdffile4;
            end;

            create_pdf_output(pathstr, name, pdffile, '-2D-all', s);
        end;
        
        if plot_flag == 2
            if ~isempty(f2)
                create_pdf_output(pathstr, name, pdffile2, ['-' all{1}{1} '--' all{1}{2} '-sep'], s);
            end;
            if ~isempty(f3)
                create_pdf_output(pathstr, name, pdffile3, ['-' all{1}{3} '--' all{1}{4} '-sep'], s);
            end;
            if ~isempty(f4)
                create_pdf_output(pathstr, name, pdffile4, ['-' all{1}{5} '--' all{1}{6} '-sep'], s);
            end;
        end;
        
    else
        close_figures(f2);
        close_figures(f3);
        close_figures(f4);
    end;

    % plot as 3D graphs
    if plot3d                        
        
        % reformat the color/symbol scheme
        p1=regexprep(s.cellcolors,' ','');
        p2=regexprep(s.symbols,' ',''); 
        
        % plot x1 vs y1 vs x2=z1
        if(length(all{1})>2)
            
            if plot_flag == 1 % plot in the same graph
                fprintf(1,'Plotting 3D graph ... \n');
                [f5 pdffile5]=plot_data_3d(4, 1,2,3, nf, fname,all,dx1,dy1,dx2,ct,p1,p2,all_treatments,tmnt,...
                    s,s.xscale1,s.yscale1,s.xscale2,s.logscale.x1,s.logscale.y1,s.logscale.x2, cellid, pathstr, name);                
                fprintf(1,'Done\n');
            else
                fprintf(1,'Plotting 3D graphs separately for each dataset not implemented. Sorry.\n');
            end;
            
        end;
        
        % plot x=y2 vs y=x3 vs z=y3
        if(length(all{1})>5)
            
            if plot_flag == 1 % plot in the same graph
                fprintf(1,'Plotting 3D graph ... \n');
                [f6 pdffile6]=plot_data_3d(5, 4,5,6, nf, fname,all,dy2,dx3,dy3,ct,p1,p2,all_treatments,tmnt,...
                    s,s.yscale2,s.xscale3,s.yscale3,s.logscale.y2,s.logscale.x3,s.logscale.y3, cellid, pathstr, name);
                fprintf(1,'Done\n');
            else
                fprintf(1,'Plotting 3D graphs separately for each dataset not implemented. Sorry.\n');
            end;
            
        end;
        
        if plot_flag == 1
            j=0;
            pdffile=[];
            if ~isempty(f5)
                j=j+1;
                pdffile{j}=pdffile5;
            end;
            if ~isempty(f6)
                j=j+1;
                pdffile{j}=pdffile6;
            end;

            create_pdf_output(pathstr, name, pdffile, '-3D-all', s);
        end;
        
    else
        close_figures(f5);
        close_figures(f6);
    end;

    disp('=== LEGEND ====================')
    disp(['cell classes: ',s.cellclasses]);
    disp(['cell colors:  ',s.cellcolors]);
    disp(['treatment type:   ',s.treatments]);
    disp(['treatment symbol: ',s.symbols]);
    disp('===============================');
    
    if plot2d
        fprintf('*** NOTE: Click on DATACURSOR to see annotations for each data-point.\n')
    end;
    
    
end;

function [f2 pdffile]=plot_data_2d(plot_flag, fig, ind1, ind2, nf, fname, all, xd, yd, ct,p1,p2,all_treatments,tmnt,...
    s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name);

if plot_flag == 1 % plot in the same graph
    [f2 pdffile] = plot_data_2dall(fig, ind1, ind2, nf, fname, all, xd, yd, ct,p1,p2,all_treatments,tmnt,...
        s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name);
elseif plot_flag == 2 % plot each dataset in a separate graph
    [f2 pdffile] = plot_data_2dsep(100*fig, ind1, ind2, nf, fname, all, xd, yd, ct,p1,p2,all_treatments,tmnt,...
        s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name);
end;
        
function [f2 pdffile]=plot_data_2dall(fig, ind1,ind2, nf, fname,all,dx,dy,ct,p1,p2,all_treatments,tmnt,...
    s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name, fig_ext)    

global additional_settings;

f2=my_figure(fig); 
subplot(1,1,1); 
hold off;
for j=1:nf
    fprintf(1,'Adding data-set %d: %s [%s %s]\n',j,fname{j},all{1}{ind1},all{1}{ind2});
    add_to_plot2d(dx{j},dy{j},ct{j},p1,p2,find(all_treatments==tmnt(j)),all{j}{ind1},all{j}{ind2},...
        s.graphtitle,xscale,yscale,logscalex,logscaley,s.disp_errorbars,...
        fname{j},cellid{j},tmnt(j));
end;
pdffile = [name '-' all{1}{ind1} '--' all{1}{ind2} '-all.eps'];
pdffile = regexprep(pdffile,'/','-');
fn = [pathstr delimiter name delimiter pdffile];
print_figure(f2,fn,additional_settings.print_factors(2));
%fprintf(1,'EPS output generated in %s\n',fn);
mepstopdf(fn,'epstopdf',1,1,0);
fn = regexprep(fn,'eps','pdf');
fn = regexprep(fn,'\','/');
pdffile = regexprep(pdffile,'eps','pdf');    
pdffile = regexprep(pdffile,'\','/'); 
%invoke the datacursormode so that we can set the UpdateFcn
hdt = datacursormode;
%set(hdt,'DisplayStyle','window');
set(hdt,'UpdateFcn',{@lanstips});
hdt = datacursormode;

function [f2 pdffile]=plot_data_2dsep(fig, ind1,ind2, nf, fname,all,dx,dy,ct,p1,p2,all_treatments,tmnt,...
    s,xscale,yscale,logscalex,logscaley, cellid, pathstr, name)    

global additional_settings;

for j=1:nf
    f2{j}=my_figure(fig+j);
    subplot(1,1,1); 
    hold off;
    fprintf(1,'Adding data-set %d: %s [%s %s]\n',j,fname{j},all{1}{ind1},all{1}{ind2});
    add_to_plot2d(dx{j},dy{j},ct{j},p1,p2,find(all_treatments==tmnt(j)),all{j}{ind1},all{j}{ind2},...
        fname{j},xscale,yscale,logscalex,logscaley,s.disp_errorbars,...
        fname{j},cellid{j},tmnt(j));
    pdffile{j} = [fname{j} '-' all{1}{ind1} '--' all{1}{ind2} '.eps'];
    pdffile{j} = regexprep(pdffile{j},'_','-');
    pdffile{j} = regexprep(pdffile{j},'/','-');
    pdffile{j} = ['eps' delimiter pdffile{j}];
    fn = [pathstr delimiter name delimiter pdffile{j}];
    print_figure(f2{j},fn,additional_settings.print_factors(2));
    %fprintf(1,'EPS output generated in %s\n',fn);
    mepstopdf(fn,'epstopdf',1,1,1);
    fn = regexprep(fn,'eps','pdf');
    fn = regexprep(fn,'\','/');
    pdffile{j} = regexprep(pdffile{j},'eps','pdf');    
    pdffile{j} = regexprep(pdffile{j},'\','/');    
    %invoke the datacursormode so that we can set the UpdateFcn
    hdt = datacursormode;
    %set(hdt,'DisplayStyle','window');
    set(hdt,'UpdateFcn',{@lanstips});
    hdt = datacursormode;
end;

function [f5 pdffile]=plot_data_3d(fig, ind1,ind2,ind3, nf, fname,all,dx,dy,dz,ct,p1,p2,all_treatments,tmnt,...
    s,xscale,yscale,zscale,logscalex,logscaley,logscalez, cellid, pathstr, name);

global additional_settings;

f5=my_figure(fig); 
subplot(1,1,1); 
hold off;
for j=1:nf
    fprintf(1,'Adding data-set %d: %s [%s %s %s]\n',j,fname{j},all{1}{ind1},all{1}{ind2},all{1}{ind3});
    add_to_plot3d(dx{j},dy{j},dz{j},ct{j},p1,p2,find(all_treatments==tmnt(j)),all{j}{ind1},all{j}{ind2},all{j}{ind3},...
        s.graphtitle,xscale,yscale,zscale,logscalex,logscaley,logscalez,s.disp_errorbars);
end;
pdffile = [name '-' all{1}{ind1} '--' all{1}{ind2} '--' all{1}{ind3} '-all.eps'];
pdffile = regexprep(pdffile,'/','-');
fn = [pathstr delimiter name delimiter pdffile];
print_figure(f5,fn,additional_settings.print_factors(2));
%fprintf(1,'EPS output generated in %s\n',fn);
mepstopdf(fn,'epstopdf',1,1,0);   
fn = regexprep(fn,'eps','pdf');
fn = regexprep(fn,'\','/');
pdffile = regexprep(pdffile,'eps','pdf');    
pdffile = regexprep(pdffile,'\','/');
f5=my_figure(fig);
if 0
    [az, el]=view;            
    % plot also x-y, y-z and x-z projections
    view([0 0]);
    fn = [pathstr delimiter name delimiter 'eps' delimiter name fig_ext '-xz.eps'];
    print_figure(f5,fn,additional_settings.print_factors(2));
    %fprintf(1,'3D graph (x-z view) saved as %s\n',fn);
    mepstopdf(fn,'epstopdf',1,1); 
    view([90 0]);
    fn = [pathstr delimiter name delimiter 'eps' delimiter name fig_ext '-yz.eps'];
    print_figure(f5,fn,additional_settings.print_factors(2));
    %fprintf(1,'3D graph (y-z view) saved as %s\n',fn);
    mepstopdf(fn,'epstopdf',1,1);
    view([0 90]);
    fn = [pathstr delimiter name delimiter 'eps' delimiter name fig_ext '-xy.eps'];
    print_figure(f5,fn,additional_settings.print_factors(2));
    %fprintf(1,'3D graph (x-y view) saved as %s\n',fn);
    mepstopdf(fn,'epstopdf',1,1);       
    % return to the default view
    view([az el]);
end;

function close_figures(f)
if ~isempty(f)
    if iscell(f)
        for ii=1:length(f)
            close(f{ii});
        end;
    else
        close(f);
    end;
end;

function create_pdf_output(pathstr, name, pdffile2, file_ext, s)                
fname = [name file_ext '.tex'];
fname = regexprep(fname,'/','-');
fout = [pathstr delimiter name delimiter fname];
fid=fopen(fout,'w');
fprintf(fid,'\\documentclass[12pt,a4paper]{article}\n','');
fprintf(fid,'\\usepackage{graphicx}\n','');
fprintf(fid,'\\usepackage[left=1in,right=1in,top=1in,bottom=1in]{geometry}\n','');
fprintf(fid,'\\usepackage[bookmarksopen=true,pdfauthor=Look@NanoSIMS,pdftitle=%s]{hyperref}\n',...
    regexprep(s.metafile,'\','/'));
fprintf(fid,'\\begin{document}\n','');
k=1;
for j=1:length(pdffile2)
    if k==1
        fprintf(fid,'\n\\begin{tabular}{cc}\n');
        fprintf(fid,'\\includegraphics[width=0.49\\textwidth]{%s}\n&\n',pdffile2{j});
        k=k+1;
    elseif k==2
        fprintf(fid,'\\includegraphics[width=0.49\\textwidth]{%s}\n',pdffile2{j});
        fprintf(fid,'\\end{tabular}\n');
        k=1;
    end;
end;    
if k==2
    fprintf(fid,'\\end{tabular}\n');
end;
fprintf(fid,'\\end{document}\n');
fclose(fid);
fprintf(1,'*** Output written to %s\n',fout);
% compile the tex file to create a PDF output
mepstopdf(fout,'pdflatex',0);
mepstopdf(fout,'pdflatex',1);
